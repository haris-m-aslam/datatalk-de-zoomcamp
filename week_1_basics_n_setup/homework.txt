gcloud --version


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_bigquery_dataset.dataset will be created
  + resource "google_bigquery_dataset" "dataset" {
      + creation_time              = (known after apply)
      + dataset_id                 = "trips_data_all"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + id                         = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "asia-south1"
      + project                    = "*****-******-******"
      + self_link                  = (known after apply)

      + access {
          + domain         = (known after apply)
          + group_by_email = (known after apply)
          + role           = (known after apply)
          + special_group  = (known after apply)
          + user_by_email  = (known after apply)

          + view {
              + dataset_id = (known after apply)
              + project_id = (known after apply)
              + table_id   = (known after apply)
            }
        }
    }

  # google_storage_bucket.data-lake-bucket will be created
  + resource "google_storage_bucket" "data-lake-bucket" {
      + force_destroy               = true
      + id                          = (known after apply)
      + location                    = "ASIA-SOUTH1"
      + name                        = "dtc_data_lake_*****-******-******"
      + project                     = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "Delete"
            }

          + condition {
              + age                   = 30
              + matches_storage_class = []
              + with_state            = (known after apply)
            }
        }

      + versioning {
          + enabled = true
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_bigquery_dataset.dataset: Creating...
google_storage_bucket.data-lake-bucket: Creating...
google_storage_bucket.data-lake-bucket: Creation complete after 3s [id=dtc_data_lake_*****-******-******]
google_bigquery_dataset.dataset: Creation complete after 3s [id=projects/*****-******-******/datasets/trips_data_all]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

select count(*) from yellow_taxi_data where tpep_pickup_datetime between '2021-01-15 00:00:00' and '2021-01-15 23:59:59';


select CAST(tpep_pickup_datetime AS DATE) as "day", max(tip_amount) as max_tip from yellow_taxi_data GROUP BY 1 order by max_tip desc

select
  CONCAT(zpu."Borough", '/', zpu."Zone") AS "pickup_loc",
  CONCAT(zdo."Borough", '/', zdo."Zone") AS "dropoff_loc",
	COUNT(1) AS "amount_of_trips"
from
    yellow_taxi_trips t join zones zpu
        on t."PULocationID" = zpu."LocationID"
    join zones zdo
        on t."DOLocationID" = zdo."LocationID"
		
where t.tpep_pickup_datetime between '2021-01-14 00:00:00' and '2021-01-14 23:59:59'
and t."PULocationID" = (select "LocationID" from zones zpu where zpu."Zone" IN ('Central Park'))
group by 1, 2
order by 3 desc


select
  CONCAT(zpu."Zone", '/', zdo."Zone") AS "zone_pair", 
  AVG(t."total_amount") AS "total_amount_average"
from
    yellow_taxi_trips t join zones zpu
        on t."PULocationID" = zpu."LocationID"
    join zones zdo
        on t."DOLocationID" = zdo."LocationID"
group by 1
order by 2 desc